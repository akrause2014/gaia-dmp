#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2022, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-time
#zrq-notes-indent
#zrq-notes-crypto
#zrq-notes-ansible
#zrq-notes-osformat
#zrq-notes-zeppelin
#

    Target:

        Test the new deployment.

    Result:

        Work in progress ...

# -----------------------------------------------------
# Unmount the Gaia data from all the nodes.
#[root@ansibler]

    nodenames=(
        zeppelin
        master01
        worker01
        worker02
        worker03
        worker04
        worker05
        worker06
        )

    for nodename in "${nodenames[@]}"
    do
        echo ""
        echo "Node [${nodename}]"
        ssh "${nodename}" \
            '
            sudo umount /data/gaia/GDR3
            '
    done


# -----------------------------------------------------
# Create a test user.
#[root@ansibler]

    source /deployments/zeppelin/bin/create-user-tools.sh

    username=$(pwgen 16 1)

    createusermain "${username}" \
    | tee "/tmp/${username}.json" \
    | jq '.shirouser | {"username": .name, "password": .password}'

    >   {
    >     "username": "oj4Isu5uo0neeRee",
    >     "password": "seclusion bagpipe immunity clang"
    >   }


# -----------------------------------------------------
# Login as our test user.
#[root@ansibler]

    password=$(
        jq -r '.shirouser.password' "/tmp/${username}.json"
        )

    zeppelinurl=http://zeppelin:8080
    zepcookies=/tmp/${username:?}.cookies

    curl \
        --silent \
        --request 'POST' \
        --cookie-jar "${zepcookies:?}" \
        --data "userName=${username:?}" \
        --data "password=${password:?}" \
        "${zeppelinurl:?}/api/login" \
    | jq '.'

    >   {
    >     "status": "OK",
    >     "message": "",
    >     "body": {
    >       "principal": "oj4Isu5uo0neeRee",
    >       "ticket": "808f1d83-9141-4853-8dd0-3b75f01a90bd",
    >       "roles": "[]"
    >     }
    >   }


# -----------------------------------------------------
# List notebooks the user can see.
#[root@ansibler]

    curl \
        --silent \
        --cookie "${zepcookies:?}" \
        "${zeppelinurl:?}/api/notebook" \
    | jq '.'

    >   {
    >     "status": "OK",
    >     "message": "",
    >     "body": [
    >       {
    >         "id": "2HHU2VRBD",
    >         "path": "/Users/oj4Isu5uo0neeRee/examples/1. Start here"
    >       },
    >       ....
    >       ....
    >       {
    >         "id": "2HJD5Q1MT",
    >         "path": "/Users/oj4Isu5uo0neeRee/examples/8. Tips and tricks"
    >       }
    >     ]
    >   }


# -----------------------------------------------------
# Run the source counts example.
#[root@ansibler]

    source /deployments/zeppelin/bin/zeppelin-rest-tools.sh

    testall \
        "${username}" \
        "${password}" \
        "/Users/${username}/examples/3" \
    | tee "/tmp/${username}-testone.json" \
    | jq '
       .notebooks[] | {
            "id": .noteid,
            "name": .execute.name,
            "path": .execute.path,
            "duration": .execute.duration,
            "paragraphs": [
                .execute.paragraphs[] | {
                    "title": .title,
                    "duration": .duration
                    }
                ]
            }
       '

    >   {
    >     "id": "2HN4QPSTN",
    >     "name": "3. Source counts over the sky",
    >     "path": "/Users/oj4Isu5uo0neeRee/examples/3. Source counts over the sky",
    >     "duration": "0:0:32",
    >     "paragraphs": [
    >       {
    >         "title": "null",
    >         "duration": "0:0:2"
    >       },
    >       {
    >         "title": "Set the resolution level and define the query",
    >         "duration": "0:0:24"
    >       },
    >       {
    >         "title": "Plot up the results",
    >         "duration": "0:0:4"
    >       }
    >     ]
    >   }

    #
    # TOTALLY NOT EXPECTED.
    #


# -----------------------------------------------------
# Run the mean proper motions example.
#[root@ansibler]

    source /deployments/zeppelin/bin/zeppelin-rest-tools.sh

    testall \
        "${username}" \
        "${password}" \
        "/Users/${username}/examples/4" \
    | tee "/tmp/${username}-testone.json" \
    | jq '
       .notebooks[] | {
            "id": .noteid,
            "name": .execute.name,
            "path": .execute.path,
            "duration": .execute.duration,
            "paragraphs": [
                .execute.paragraphs[] | {
                    "title": .title,
                    "duration": .duration
                    }
                ]
            }
       '

    >   {
    >     "id": "2HKXR6HAC",
    >     "name": "4. Mean proper motions over the sky",
    >     "path": "/Users/oj4Isu5uo0neeRee/examples/4. Mean proper motions over the sky",
    >     "duration": "0:0:9",
    >     "paragraphs": [
    >       {
    >         "title": "Introduction",
    >         "duration": "0:0:0"
    >       },
    >       {
    >         "title": "Set HEALPix resolution",
    >         "duration": "0:0:1"
    >       },
    >       {
    >         "title": "Define a data frame by SQL query",
    >         "duration": "0:0:0"
    >       },
    >       {
    >         "title": "Mean RA proper motion plot",
    >         "duration": "0:0:8"
    >       }
    >     ]
    >   }

    #
    # TOTALLY NOT EXPECTED.
    #


# -----------------------------------------------------
# Run the XP spectra example.
#[root@ansibler]

    source /deployments/zeppelin/bin/zeppelin-rest-tools.sh

    testall \
        "${username}" \
        "${password}" \
        "/Users/${username}/examples/5" \
    | tee "/tmp/${username}-testone.json" \
    | jq '
       .notebooks[] | {
            "id": .noteid,
            "name": .execute.name,
            "path": .execute.path,
            "duration": .execute.duration,
            "paragraphs": [
                .execute.paragraphs[] | {
                    "title": .title,
                    "duration": .duration
                    }
                ]
            }
       '

    >   {
    >     "id": "2HNER1QFV",
    >     "name": "5. Working with Gaia XP spectra",
    >     "path": "/Users/oj4Isu5uo0neeRee/examples/5. Working with Gaia XP spectra",
    >     "duration": "0:0:4",
    >     "paragraphs": [
    >       {
    >         "title": "Introduction",
    >         "duration": "0:0:0"
    >       },
    >       {
    >         "title": "Sampling and plotting spectra (continuous representation)",
    >         "duration": "0:0:3"
    >       }
    >     ]
    >   }


# -----------------------------------------------------
# Our jq filter is skipping the execution status.
#[root@ansibler]

    jq '
       .notebooks[] | {
            "id": .noteid,
            "name": .execute.name,
            "path": .execute.path,
            "duration": .execute.duration,
            "paragraphs": [
                .execute.paragraphs[] | {
                    "title": .title,
                    "status": .execute.status,
                    "code":   .execute.body.code,
                    "duration": .duration
                    }
                ]
            }
       ' "/tmp/${username}-testone.json"


    >   {
    >     "id": "2HNER1QFV",
    >     "name": "5. Working with Gaia XP spectra",
    >     "path": "/Users/oj4Isu5uo0neeRee/examples/5. Working with Gaia XP spectra",
    >     "duration": "0:0:4",
    >     "paragraphs": [
    >       {
    >         "title": "Introduction",
    >         "status": "OK",
    >         "code": "SUCCESS",
    >         "duration": "0:0:0"
    >       },
    >       {
    >         "title": "Sampling and plotting spectra (continuous representation)",
    >         "status": "OK",
    >         "code": "ERROR",
    >         "duration": "0:0:3"
    >       }
    >     ]
    >   }


# -----------------------------------------------------
# Run the source counts example with the new filter.
#[root@ansibler]

    source /deployments/zeppelin/bin/zeppelin-rest-tools.sh

    testall \
        "${username}" \
        "${password}" \
        "/Users/${username}/examples/3" \
    | tee "/tmp/${username}-testone.json" \
    | jq '
       .notebooks[] | {
            "id": .noteid,
            "name": .execute.name,
            "path": .execute.path,
            "duration": .execute.duration,
            "paragraphs": [
                .execute.paragraphs[] | {
                    "title": .title,
                    "status": .execute.status,
                    "code":   .execute.body.code,
                    "duration": .duration
                    }
                ]
            }
       '

    >   {
    >     "id": "2HN4QPSTN",
    >     "name": "3. Source counts over the sky",
    >     "path": "/Users/oj4Isu5uo0neeRee/examples/3. Source counts over the sky",
    >     "duration": "0:0:3",
    >     "paragraphs": [
    >       {
    >         "title": "null",
    >         "status": "OK",
    >         "code": "SUCCESS",
    >         "duration": "0:0:0"
    >       },
    >       {
    >         "title": "Set the resolution level and define the query",
    >         "status": "OK",
    >         "code": "SUCCESS",
    >         "duration": "0:0:0"
    >       },
    >       {
    >         "title": "Plot up the results",
    >         "status": "OK",
    >         "code": "ERROR",
    >         "duration": "0:0:2"
    >       }
    >     ]
    >   }


# -----------------------------------------------------
# Run the proper motions example with the new filter.
#[root@ansibler]

    source /deployments/zeppelin/bin/zeppelin-rest-tools.sh

    testall \
        "${username}" \
        "${password}" \
        "/Users/${username}/examples/4" \
    | tee "/tmp/${username}-testone.json" \
    | jq '
       .notebooks[] | {
            "id": .noteid,
            "name": .execute.name,
            "path": .execute.path,
            "duration": .execute.duration,
            "paragraphs": [
                .execute.paragraphs[] | {
                    "title": .title,
                    "status": .execute.status,
                    "code":   .execute.body.code,
                    "duration": .duration
                    }
                ]
            }
       '

    >   {
    >     "id": "2HKXR6HAC",
    >     "name": "4. Mean proper motions over the sky",
    >     "path": "/Users/oj4Isu5uo0neeRee/examples/4. Mean proper motions over the sky",
    >     "duration": "0:0:4",
    >     "paragraphs": [
    >       {
    >         "title": "Introduction",
    >         "status": "OK",
    >         "code": "SUCCESS",
    >         "duration": "0:0:0"
    >       },
    >       {
    >         "title": "Set HEALPix resolution",
    >         "status": "OK",
    >         "code": "SUCCESS",
    >         "duration": "0:0:0"
    >       },
    >       {
    >         "title": "Define a data frame by SQL query",
    >         "status": "OK",
    >         "code": "SUCCESS",
    >         "duration": "0:0:0"
    >       },
    >       {
    >         "title": "Mean RA proper motion plot",
    >         "status": "OK",
    >         "code": "ERROR",
    >         "duration": "0:0:3"
    >       }
    >     ]
    >   }


# -----------------------------------------------------
# Mount the Gaia data from all the nodes.
#[root@ansibler]

    nodenames=(
        zeppelin
        master01
        worker01
        worker02
        worker03
        worker04
        worker05
        worker06
        )

    for nodename in "${nodenames[@]}"
    do
        echo ""
        echo "Node [${nodename}]"
        ssh "${nodename}" \
            '
            sudo mount /data/gaia/GDR3
            '
    done

    >   ....
    >   ....


# -----------------------------------------------------
# Run the source counts example with the new filter.
#[root@ansibler]

    source /deployments/zeppelin/bin/zeppelin-rest-tools.sh

    testall \
        "${username}" \
        "${password}" \
        "/Users/${username}/examples/3" \
    | tee "/tmp/${username}-testone.json" \
    | jq '
       .notebooks[] | {
            "id": .noteid,
            "name": .execute.name,
            "path": .execute.path,
            "duration": .execute.duration,
            "paragraphs": [
                .execute.paragraphs[] | {
                    "title": .title,
                    "status": .execute.status,
                    "code":   .execute.body.code,
                    "duration": .duration
                    }
                ]
            }
       '

    >   {
    >     "id": "2HN4QPSTN",
    >     "name": "3. Source counts over the sky",
    >     "path": "/Users/oj4Isu5uo0neeRee/examples/3. Source counts over the sky",
    >     "duration": "0:0:4",
    >     "paragraphs": [
    >       {
    >         "title": "null",
    >         "status": "OK",
    >         "code": "SUCCESS",
    >         "duration": "0:0:0"
    >       },
    >       {
    >         "title": "Set the resolution level and define the query",
    >         "status": "OK",
    >         "code": "SUCCESS",
    >         "duration": "0:0:0"
    >       },
    >       {
    >         "title": "Plot up the results",
    >         "status": "OK",
    >         "code": "ERROR",
    >         "duration": "0:0:3"
    >       }
    >     ]
    >   }

    #
    # Do we need to restart the interpreter ?
    # Create a new user account or restart Zeppelin.
    # Restarting Zeppelin is the easiest to do, but more than I would like.
    # Need to figure out how to restart interpreters.
    #


# -----------------------------------------------------
# Restart Zeppelin.
#[root@ansibler]

    ssh zeppelin \
        '
        zeppelin-daemon.sh restart
        '

    >   Zeppelin stop                                              [  OK  ]
    >   Zeppelin start                                             [  OK  ]


# -----------------------------------------------------
# Login as our test user.
#[root@ansibler]

    zeppelinurl=http://zeppelin:8080
    zepcookies=/tmp/${username:?}.cookies

    curl \
        --silent \
        --request 'POST' \
        --cookie-jar "${zepcookies:?}" \
        --data "userName=${username:?}" \
        --data "password=${password:?}" \
        "${zeppelinurl:?}/api/login" \
    | jq '.'

    >   {
    >     "status": "OK",
    >     "message": "",
    >     "body": {
    >       "principal": "oj4Isu5uo0neeRee",
    >       "ticket": "04c17201-dd81-4bb5-8e4b-79e474a1fc16",
    >       "roles": "[]"
    >     }
    >   }


# -----------------------------------------------------
# Run the source counts example.
#[root@ansibler]

    source /deployments/zeppelin/bin/zeppelin-rest-tools.sh

    testall \
        "${username}" \
        "${password}" \
        "/Users/${username}/examples/3" \
    | tee "/tmp/${username}-testone.json" \
    | jq '
       .notebooks[] | {
            "id": .noteid,
            "name": .execute.name,
            "path": .execute.path,
            "duration": .execute.duration,
            "paragraphs": [
                .execute.paragraphs[] | {
                    "title": .title,
                    "status": .execute.status,
                    "code":   .execute.body.code,
                    "duration": .duration
                    }
                ]
            }
       '

    >   {
    >     "id": "2HN4QPSTN",
    >     "name": "3. Source counts over the sky",
    >     "path": "/Users/oj4Isu5uo0neeRee/examples/3. Source counts over the sky",
    >     "duration": "0:1:30",
    >     "paragraphs": [
    >       {
    >         "title": "null",
    >         "status": "OK",
    >         "code": "SUCCESS",
    >         "duration": "0:0:4"
    >       },
    >       {
    >         "title": "Set the resolution level and define the query",
    >         "status": "OK",
    >         "code": "SUCCESS",
    >         "duration": "0:0:26"
    >       },
    >       {
    >         "title": "Plot up the results",
    >         "status": "OK",
    >         "code": "SUCCESS",
    >         "duration": "0:0:59"
    >       },
    >       {
    >         "title": "Further reading and resources",
    >         "status": "OK",
    >         "code": "SUCCESS",
    >         "duration": "0:0:0"
    >       },
    >       {
    >         "title": "null",
    >         "status": "OK",
    >         "code": "SUCCESS",
    >         "duration": "0:0:0"
    >       }
    >     ]
    >   }


    #
    # Looks good.
    # We were getting false +ve results using the REST API because our 'jq' filter was skipping the execution status code.
    # Still TODO
    # verify the row count for all the tables
    # re-instate the file count for all the tables
    #
