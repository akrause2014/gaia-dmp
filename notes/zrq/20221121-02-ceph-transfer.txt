#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2022, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-time
#zrq-notes-indent
#zrq-notes-crypto
#zrq-notes-ansible
#zrq-notes-osformat
#zrq-notes-zeppelin
#

    Target:

        Test the new DR3 data share.
        https://github.com/wfau/gaia-dmp/issues/1018

    Result:

        Work in progress ...
        Some tests failing with the new data.
        Unexpected false positive tests !?



# -----------------------------------------------------
# Import our test users.
#[root@ansibler]

    source /deployments/zeppelin/bin/create-user-tools.sh

    import-test-users

    >   ....
    >   ....


# -----------------------------------------------------
# Create our list of credentials.
#[root@ansibler]

    jq '
        {
        "users": [
                {
                "shirouser":
                    .users[] | .shirouser | {"name": .name, "pass": .password}
                }
            ]
        }
        ' /tmp/test-users.json \
    | tee /tmp/test-creds.json


    >   {
    >     "users": [
    >       {
    >         "shirouser": {
    >           "name": "Reyesfan",
    >           "pass": "stardust spokesman agnostic decathlon"
    >         }
    >       },
    >       ....
    >       ....
    >       {
    >         "shirouser": {
    >           "name": "Drizzbinson",
    >           "pass": "evolution excusable silica civic"
    >         }
    >       }
    >     ]
    >   }


# -----------------------------------------------------
# Install the benchmark test toolkit.
#[root@ansibler]

    pip install git+https://github.com/wfau/aglais-testing@v0.2.4


# -----------------------------------------------------
# Create our benchmark script.
#[root@ansibler]

    cat > /tmp/run-benchmark.py << 'EOF'
#!/bin/python3
import sys
from aglais_benchmark import AglaisBenchmarker

try:

    opts = [opt for opt in sys.argv[1:] if opt.startswith("-")]
    args = [arg for arg in sys.argv[1:] if not arg.startswith("-")]

    endpoint = args[0]
    testconfig = args[1]
    userlist = args[2]
    usercount = int(args[3])
    delaystart = int(args[4])
    delaynotebook = int(args[5])

except IndexError:

    raise SystemExit(f"Usage: {sys.argv[0]} <Zepelin endpoint> <test config> <list of users> <number of users>")

print("{")
print(
"""
\"config\": {{
    \"endpoint\":   \"{}\",
    \"testconfig\": \"{}\",
    \"userlist\":   \"{}\",
    \"usercount\":  \"{}\",
    \"delaystart\":  \"{}\",
    \"delaynotebook\":  \"{}\"
    }},
\"output\":
""".format(
        endpoint,
        testconfig,
        userlist,
        usercount,
        delaystart,
        delaynotebook
        )
    )
AglaisBenchmarker(
    testconfig,
    userlist,
    "/tmp/",
    endpoint
    ).run(
        concurrent=True,
        users=usercount,
        delay_start=delaystart,
        delay_notebook=delaynotebook
        )
print("}")
EOF

    chmod 'a+x' /tmp/run-benchmark.py


# -----------------------------------------------------
# Run our simple test set.
#[root@ansibler]

    usercount=2

    endpoint="http://zeppelin:8080"
    testconfig=/deployments/zeppelin/test/config/quick.json
    testusers=/tmp/test-creds.json

    testname="multi-user-$(printf "%02d" ${usercount})-00"

    delaystart=4
    delaynotebook=5

    mkdir -p /tmp/results

    /tmp/run-benchmark.py \
        "${endpoint:?}" \
        "${testconfig:?}" \
        "${testusers:?}" \
        "${usercount:?}" \
        "${delaystart:?}" \
        "${delaynotebook:?}" \
    | tee "/tmp/results/${testname:?}.txt"

    >   ERROR:root:can only concatenate str (not "NoneType") to str
    >   Traceback (most recent call last):
    >     File "/usr/local/lib/python3.10/site-packages/aglais_benchmark/aglais_benchmark.py", line 37, in __init__
    >       self.generate_zdairi_user_configs()
    >     File "/usr/local/lib/python3.10/site-packages/aglais_benchmark/aglais_benchmark.py", line 67, in generate_zdairi_user_configs
    >       f.write("zeppelin_password: " + shiro_user.get("password") + "\n")
    >   TypeError: can only concatenate str (not "NoneType") to str


# -----------------------------------------------------
# Create our list of credentials.
#[root@ansibler]

    jq '
        {
        "users": [
                {
                "shirouser":
                    .users[] | .shirouser | {"name": .name, "password": .password}
                }
            ]
        }
        ' /tmp/test-users.json \
    | tee /tmp/test-creds.json


    >   {
    >     "users": [
    >       {
    >         "shirouser": {
    >           "name": "Reyesfan",
    >           "password": "stardust spokesman agnostic decathlon"
    >         }
    >       },
    >       ....
    >       ....
    >       {
    >         "shirouser": {
    >           "name": "Drizzbinson",
    >           "password": "evolution excusable silica civic"
    >         }
    >       }
    >     ]
    >   }


# -----------------------------------------------------
# Run our simple test set.
#[root@ansibler]

    usercount=2

    endpoint="http://zeppelin:8080"
    testconfig=/deployments/zeppelin/test/config/quick.json
    testusers=/tmp/test-creds.json

    testname="multi-user-$(printf "%02d" ${usercount})-00"

    delaystart=4
    delaynotebook=5

    mkdir -p /tmp/results

    /tmp/run-benchmark.py \
        "${endpoint:?}" \
        "${testconfig:?}" \
        "${testusers:?}" \
        "${usercount:?}" \
        "${delaystart:?}" \
        "${delaynotebook:?}" \
    | tee "/tmp/results/${testname:?}.txt"


    >   Test started [Multi User]
    >   Test completed! (74.01 seconds)
    >   [
    >       [
    >           {
    >           "name": "GaiaDMPSetup",
    >           "result": "FAIL",
    >           "outputs": {"valid": true},
    >           "messages": [
    >               "Exception encountered while trying to create a notebook: /tmp/ABX225LGA4.json for user in config: /tmp/user1.yml",
    >               "HTTPConnectionPool(
    >                   host='zeppelin',
    >                   port=8080
    >                   ):
    >                   Max retries exceeded with url: /api/login (
    >                       Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f7c06589390>: Failed to establish a new connection: [Errno -2] Name or service not known'
    >                       )
    >                   )"
    >               ],
    >           "time": {
    >               "result": "FAST",
    >               "elapsed": "12.23",
    >               "expected": "45.00",
    >               "percent": "-72.83",
    >               "start": "2022-11-21T15:38:10.390477",
    >               "finish": "2022-11-21T15:38:22.615887"},
    >               "logs": ""
    >               },
    >           ....
    >           ....


# -----------------------------------------------------
# Get the IP address from the ssh config file.
# TODO Save the IP address during the deployment process.
# https://github.com/wfau/aglais/issues/860
#[root@ansibler]

    ipaddress=$(

        sed -n '
            /^Host zeppelin/,/^Host/ {
                /HostName/ {
                    s/^[[:space:]]*HostName[[:space:]]\(.*\)/\1/ p
                    }
                }
            ' ~/.ssh/config

        )

# -----------------------------------------------------
# Add the Zeppelin IP address to our hosts file.
# TODO Add this to the Ansible deployment.
# https://github.com/wfau/aglais/issues/862
# WARNING this is not idempotent.
# Deploying more than once adds multiple rows
#[root@ansibler]

    cat >> /etc/hosts << EOF
# Zeppelin
${ipaddress}    zeppelin
EOF


# -----------------------------------------------------
# Run our simple test set.
#[root@ansibler]

    usercount=2

    endpoint="http://zeppelin:8080"
    testconfig=/deployments/zeppelin/test/config/quick.json
    testusers=/tmp/test-creds.json

    testname="multi-user-$(printf "%02d" ${usercount})-00"

    delaystart=4
    delaynotebook=5

    mkdir -p /tmp/results

    /tmp/run-benchmark.py \
        "${endpoint:?}" \
        "${testconfig:?}" \
        "${testusers:?}" \
        "${usercount:?}" \
        "${delaystart:?}" \
        "${delaynotebook:?}" \
    | tee "/tmp/results/${testname:?}.txt" \
    | sed '
        /^Test started/ d
        /^Test completed/ d
        ' \
    | jq '.'


    >   {
    >     "config": {
    >       "endpoint": "http://zeppelin:8080",
    >       "testconfig": "/deployments/zeppelin/test/config/quick.json",
    >       "userlist": "/tmp/test-creds.json",
    >       "usercount": "2",
    >       "delaystart": "4",
    >       "delaynotebook": "5"
    >     },
    >     "output": [
    >       [
    >         {
    >           "name": "GaiaDMPSetup",
    >           "result": "PASS",
    >           "outputs": {
    >             "valid": true
    >           },
    >           "messages": [],
    >           "time": {
    >             "result": "FAST",
    >             "elapsed": "3.31",
    >             "expected": "45.00",
    >             "percent": "-92.65",
    >             "start": "2022-11-21T16:22:54.457281",
    >             "finish": "2022-11-21T16:22:57.763257"
    >           },
    >           "logs": ""
    >         },
    >         {
    >           "name": "Mean_proper_motions_over_the_sky",
    >           "result": "PASS",
    >           "outputs": {
    >             "valid": true
    >           },
    >           "messages": [],
    >           "time": {
    >             "result": "SLOW",
    >             "elapsed": "97.78",
    >             "expected": "55.00",
    >             "percent": "77.78",
    >             "start": "2022-11-21T16:23:02.768749",
    >             "finish": "2022-11-21T16:24:40.548165"
    >           },
    >           "logs": ""
    >         },
    >         {
    >           "name": "Source_counts_over_the_sky.json",
    >           "result": "PASS",
    >           "outputs": {
    >             "valid": true
    >           },
    >           "messages": [],
    >           "time": {
    >             "result": "SLOW",
    >             "elapsed": "38.32",
    >             "expected": "22.00",
    >             "percent": "74.17",
    >             "start": "2022-11-21T16:24:45.553474",
    >             "finish": "2022-11-21T16:25:23.869864"
    >           },
    >           "logs": ""
    >         },
    >         {
    >           "name": "Library_Validation.json",
    >           "result": "PASS",
    >           "outputs": {
    >             "valid": true
    >           },
    >           "messages": [],
    >           "time": {
    >             "result": "FAST",
    >             "elapsed": "9.70",
    >             "expected": "60.00",
    >             "percent": "-83.84",
    >             "start": "2022-11-21T16:25:28.876761",
    >             "finish": "2022-11-21T16:25:38.574830"
    >           },
    >           "logs": ""
    >         }
    >       ],
    >       [
    >         {
    >           "name": "GaiaDMPSetup",
    >           "result": "PASS",
    >           "outputs": {
    >             "valid": true
    >           },
    >           "messages": [],
    >           "time": {
    >             "result": "FAST",
    >             "elapsed": "3.20",
    >             "expected": "45.00",
    >             "percent": "-92.89",
    >             "start": "2022-11-21T16:22:58.460752",
    >             "finish": "2022-11-21T16:23:01.660287"
    >           },
    >           "logs": ""
    >         },
    >         {
    >           "name": "Mean_proper_motions_over_the_sky",
    >           "result": "PASS",
    >           "outputs": {
    >             "valid": true
    >           },
    >           "messages": [],
    >           "time": {
    >             "result": "SLOW",
    >             "elapsed": "222.50",
    >             "expected": "55.00",
    >             "percent": "304.55",
    >             "start": "2022-11-21T16:23:06.665674",
    >             "finish": "2022-11-21T16:26:49.168448"
    >           },
    >           "logs": ""
    >         },
    >         {
    >           "name": "Source_counts_over_the_sky.json",
    >           "result": "PASS",
    >           "outputs": {
    >             "valid": true
    >           },
    >           "messages": [],
    >           "time": {
    >             "result": "SLOW",
    >             "elapsed": "34.10",
    >             "expected": "22.00",
    >             "percent": "55.00",
    >             "start": "2022-11-21T16:26:54.173952",
    >             "finish": "2022-11-21T16:27:28.274220"
    >           },
    >           "logs": ""
    >         },
    >         {
    >           "name": "Library_Validation.json",
    >           "result": "PASS",
    >           "outputs": {
    >             "valid": true
    >           },
    >           "messages": [],
    >           "time": {
    >             "result": "FAST",
    >             "elapsed": "9.56",
    >             "expected": "60.00",
    >             "percent": "-84.07",
    >             "start": "2022-11-21T16:27:33.279428",
    >             "finish": "2022-11-21T16:27:42.836936"
    >           },
    >           "logs": ""
    >         }
    >       ]
    >     ]
    >   }


# -----------------------------------------------------
# Install an editable version of gaiadmpsetup.
#[root@ansibler]

    git clone https://github.com/wfau/gaiadmpsetup

    >   Cloning into 'gaiadmpsetup'...
    >   remote: Enumerating objects: 111, done.
    >   remote: Counting objects: 100% (22/22), done.
    >   remote: Compressing objects: 100% (16/16), done.
    >   remote: Total 111 (delta 8), reused 6 (delta 6), pack-reused 89
    >   Receiving objects: 100% (111/111), 60.88 KiB | 74.00 KiB/s, done.
    >   Resolving deltas: 100% (66/66), done.


    sudo pip install --editable gaiadmpsetup

    >   Obtaining file:///home/fedora/gaiadmpsetup
    >   Installing collected packages: gaiadmpsetup
    >     Found existing installation: gaiadmpsetup 0.1.1
    >       Uninstalling gaiadmpsetup-0.1.1:
    >         Successfully uninstalled gaiadmpsetup-0.1.1
    >     Running setup.py develop for gaiadmpsetup
    >   Successfully installed gaiadmpsetup


# -----------------------------------------------------
# Edit local version of gaiadmpsetup to use the wrong path.
#[root@ansibler]

    ssh zeppelin

        vi "${HOME}/gaiadmpsetup/gaiadmpsetup/gaiadr3_pyspark_schema_structures.py"

            # base folder for all release products
        -   release_folder = 'GDR3'
        +   release_folder = 'GDR3_FROG'


# -----------------------------------------------------
# Run our simple test set.
#[root@ansibler]

    usercount=2

    endpoint="http://zeppelin:8080"
    testconfig=/deployments/zeppelin/test/config/quick.json
    testusers=/tmp/test-creds.json

    testname="multi-user-$(printf "%02d" ${usercount})-00"

    delaystart=4
    delaynotebook=5

    mkdir -p /tmp/results

    /tmp/run-benchmark.py \
        "${endpoint:?}" \
        "${testconfig:?}" \
        "${testusers:?}" \
        "${usercount:?}" \
        "${delaystart:?}" \
        "${delaynotebook:?}" \
    | tee "/tmp/results/${testname:?}.txt" \
    | sed '
        /^Test started/ d
        /^Test completed/ d
        ' \
    | jq '.'

    >   {
    >     "config": {
    >       "endpoint": "http://zeppelin:8080",
    >       "testconfig": "/deployments/zeppelin/test/config/quick.json",
    >       "userlist": "/tmp/test-creds.json",
    >       "usercount": "2",
    >       "delaystart": "4",
    >       "delaynotebook": "5"
    >     },
    >     "output": [
    >       [
    >         {
    >           "name": "GaiaDMPSetup",
    >           "result": "PASS",
    >           "outputs": {
    >             "valid": true
    >           },
    >           "messages": [],
    >           "time": {
    >             "result": "FAST",
    >             "elapsed": "34.90",
    >             "expected": "45.00",
    >             "percent": "-22.44",
    >             "start": "2022-11-21T16:56:44.092424",
    >             "finish": "2022-11-21T16:57:18.992910"
    >           },
    >           "logs": ""
    >         },
    >         {
    >           "name": "Mean_proper_motions_over_the_sky",
    >           "result": "PASS",
    >           "outputs": {
    >             "valid": true
    >           },
    >           "messages": [],
    >           "time": {
    >             "result": "FAST",
    >             "elapsed": "16.82",
    >             "expected": "55.00",
    >             "percent": "-69.42",
    >             "start": "2022-11-21T16:57:23.997432",
    >             "finish": "2022-11-21T16:57:40.817663"
    >           },
    >           "logs": ""
    >         },
    >         {
    >           "name": "Source_counts_over_the_sky.json",
    >           "result": "ERROR",
    >           "outputs": {
    >             "valid": true
    >           },
    >           "messages": [],
    >           "time": {
    >             "result": "FAST",
    >             "elapsed": "4.15",
    >             "expected": "22.00",
    >             "percent": "-81.14",
    >             "start": "2022-11-21T16:57:45.823148",
    >             "finish": "2022-11-21T16:57:49.971689"
    >           },
    >           "logs": "
    >   /usr/local/lib64/python3.7/site-packages/healpy/pixelfunc.py:339: RuntimeWarning: invalid value encountered in subtract
    >     return np.absolute(m - badval) <= atol + rtol * np.absolute(badval)
    >   /usr/local/lib64/python3.7/site-packages/healpy/projaxes.py:920: MatplotlibDeprecationWarning: You are modifying the state of a globally registered colormap. This has been deprecated since 3.3 and in 3.6, you will not be able to modify a registered colormap in-place. To remove this warning, you can make a copy of the colormap first. cmap = mpl.cm.get_cmap(\"viridis\").copy()
    >     newcm.set_over(newcm(1.0))
    >   /usr/local/lib64/python3.7/site-packages/healpy/projaxes.py:921: MatplotlibDeprecationWarning: You are modifying the state of a globally registered colormap. This has been deprecated since 3.3 and in 3.6, you will not be able to modify a registered colormap in-place. To remove this warning, you can make a copy of the colormap first. cmap = mpl.cm.get_cmap(\"viridis\").copy()
    >     newcm.set_under(bgcolor)
    >   /usr/local/lib64/python3.7/site-packages/healpy/projaxes.py:922: MatplotlibDeprecationWarning: You are modifying the state of a globally registered colormap. This has been deprecated since 3.3 and in 3.6, you will not be able to modify a registered colormap in-place. To remove this warning, you can make a copy of the colormap first. cmap = mpl.cm.get_cmap(\"viridis\").copy()
    >     newcm.set_bad(badcolor)
    >   /usr/local/lib64/python3.7/site-packages/numpy/core/numeric.py:2365: RuntimeWarning: invalid value encountered in multiply
    >     x = x * ones_like(cond)
    >   /usr/local/lib64/python3.7/site-packages/numpy/ma/core.py:1015: RuntimeWarning: overflow encountered in multiply
    >     result = self.f(da, db, *args, **kwargs)
    >   /usr/local/lib64/python3.7/site-packages/healpy/projaxes.py:943: RuntimeWarning: invalid value encountered in log10
    >     locs = np.log10(vmin) + np.arange(self.Nlocs) * (
    >   /usr/local/lib64/python3.7/site-packages/healpy/projaxes.py:945: RuntimeWarning: invalid value encountered in log10
    >     ) / (self.Nlocs - 1.0)
    >   /usr/local/lib64/python3.7/site-packages/matplotlib/image.py:446: RuntimeWarning: overflow encountered in double_scalars
    >     newmin = vmid - dv * fact
    >   /usr/local/lib64/python3.7/site-packages/matplotlib/image.py:451: RuntimeWarning: overflow encountered in double_scalars
    >     newmax = vmid + dv * fact
    >   /usr/local/lib64/python3.7/site-packages/matplotlib/image.py:479: RuntimeWarning: invalid value encountered in subtract
    >     A_scaled -= a_min
    >   /usr/local/lib64/python3.7/site-packages/matplotlib/image.py:487: RuntimeWarning: invalid value encountered in true_divide
    >     A_scaled /= ((a_max - a_min) / frac)
    >   /usr/local/lib64/python3.7/site-packages/matplotlib/image.py:503: RuntimeWarning: invalid value encountered in multiply
    >     A_resampled *= ((a_max - a_min) / frac)
    >   /usr/local/lib64/python3.7/site-packages/matplotlib/image.py:504: RuntimeWarning: invalid value encountered in multiply
    >     vrange *= ((a_max - a_min) / frac)
    >   /usr/local/lib64/python3.7/site-packages/matplotlib/ticker.py:2222: RuntimeWarning: overflow encountered in multiply
    >     steps = self._extended_steps * scale
    >   /usr/local/lib64/python3.7/site-packages/matplotlib/ticker.py:2246: RuntimeWarning: overflow encountered in double_scalars
    >     best_vmin = (_vmin // step) * step
    >   /usr/local/lib64/python3.7/site-packages/matplotlib/ticker.py:2061: RuntimeWarning: invalid value encountered in double_scalars
    >     d, m = divmod(x, self.step)
    >   /usr/local/lib64/python3.7/site-packages/matplotlib/ticker.py:2068: RuntimeWarning: invalid value encountered in double_scalars
    >     d, m = divmod(x, self.step)
    >   "
    >         },
    >         {
    >           "name": "Library_Validation.json",
    >           "result": "PASS",
    >           "outputs": {
    >             "valid": true
    >           },
    >           "messages": [],
    >           "time": {
    >             "result": "FAST",
    >             "elapsed": "9.65",
    >             "expected": "60.00",
    >             "percent": "-83.92",
    >             "start": "2022-11-21T16:57:54.977721",
    >             "finish": "2022-11-21T16:58:04.624274"
    >           },
    >           "logs": ""
    >         }
    >       ],
    >       [
    >         {
    >           "name": "GaiaDMPSetup",
    >           "result": "PASS",
    >           "outputs": {
    >             "valid": true
    >           },
    >           "messages": [],
    >           "time": {
    >             "result": "FAST",
    >             "elapsed": "37.79",
    >             "expected": "45.00",
    >             "percent": "-16.03",
    >             "start": "2022-11-21T16:56:48.096674",
    >             "finish": "2022-11-21T16:57:25.883940"
    >           },
    >           "logs": ""
    >         },
    >         {
    >           "name": "Mean_proper_motions_over_the_sky",
    >           "result": "PASS",
    >           "outputs": {
    >             "valid": true
    >           },
    >           "messages": [],
    >           "time": {
    >             "result": "FAST",
    >             "elapsed": "14.32",
    >             "expected": "55.00",
    >             "percent": "-73.97",
    >             "start": "2022-11-21T16:57:30.888438",
    >             "finish": "2022-11-21T16:57:45.204628"
    >           },
    >           "logs": ""
    >         },
    >         {
    >           "name": "Source_counts_over_the_sky.json",
    >           "result": "ERROR",
    >           "outputs": {
    >             "valid": true
    >           },
    >           "messages": [],
    >           "time": {
    >             "result": "FAST",
    >             "elapsed": "3.92",
    >             "expected": "22.00",
    >             "percent": "-82.19",
    >             "start": "2022-11-21T16:57:50.210033",
    >             "finish": "2022-11-21T16:57:54.128977"
    >           },
    >           "logs": "
    >   /usr/local/lib64/python3.7/site-packages/healpy/pixelfunc.py:339: RuntimeWarning: invalid value encountered in subtract
    >     return np.absolute(m - badval) <= atol + rtol * np.absolute(badval)
    >   /usr/local/lib64/python3.7/site-packages/healpy/projaxes.py:920: MatplotlibDeprecationWarning: You are modifying the state of a globally registered colormap. This has been deprecated since 3.3 and in 3.6, you will not be able to modify a registered colormap in-place. To remove this warning, you can make a copy of the colormap first. cmap = mpl.cm.get_cmap(\"viridis\").copy()
    >     newcm.set_over(newcm(1.0))
    >   /usr/local/lib64/python3.7/site-packages/healpy/projaxes.py:921: MatplotlibDeprecationWarning: You are modifying the state of a globally registered colormap. This has been deprecated since 3.3 and in 3.6, you will not be able to modify a registered colormap in-place. To remove this warning, you can make a copy of the colormap first. cmap = mpl.cm.get_cmap(\"viridis\").copy()
    >     newcm.set_under(bgcolor)
    >   /usr/local/lib64/python3.7/site-packages/healpy/projaxes.py:922: MatplotlibDeprecationWarning: You are modifying the state of a globally registered colormap. This has been deprecated since 3.3 and in 3.6, you will not be able to modify a registered colormap in-place. To remove this warning, you can make a copy of the colormap first. cmap = mpl.cm.get_cmap(\"viridis\").copy()
    >     newcm.set_bad(badcolor)
    >   /usr/local/lib64/python3.7/site-packages/numpy/core/numeric.py:2365: RuntimeWarning: invalid value encountered in multiply
    >     x = x * ones_like(cond)
    >   /usr/local/lib64/python3.7/site-packages/numpy/ma/core.py:1015: RuntimeWarning: overflow encountered in multiply
    >     result = self.f(da, db, *args, **kwargs)
    >   /usr/local/lib64/python3.7/site-packages/healpy/projaxes.py:943: RuntimeWarning: invalid value encountered in log10
    >     locs = np.log10(vmin) + np.arange(self.Nlocs) * (
    >   /usr/local/lib64/python3.7/site-packages/healpy/projaxes.py:945: RuntimeWarning: invalid value encountered in log10
    >     ) / (self.Nlocs - 1.0)
    >   /usr/local/lib64/python3.7/site-packages/matplotlib/image.py:446: RuntimeWarning: overflow encountered in double_scalars
    >     newmin = vmid - dv * fact
    >   /usr/local/lib64/python3.7/site-packages/matplotlib/image.py:451: RuntimeWarning: overflow encountered in double_scalars
    >     newmax = vmid + dv * fact
    >   /usr/local/lib64/python3.7/site-packages/matplotlib/image.py:479: RuntimeWarning: invalid value encountered in subtract
    >     A_scaled -= a_min
    >   /usr/local/lib64/python3.7/site-packages/matplotlib/image.py:487: RuntimeWarning: invalid value encountered in true_divide
    >     A_scaled /= ((a_max - a_min) / frac)
    >   /usr/local/lib64/python3.7/site-packages/matplotlib/image.py:503: RuntimeWarning: invalid value encountered in multiply
    >     A_resampled *= ((a_max - a_min) / frac)
    >   /usr/local/lib64/python3.7/site-packages/matplotlib/image.py:504: RuntimeWarning: invalid value encountered in multiply
    >     vrange *= ((a_max - a_min) / frac)
    >   /usr/local/lib64/python3.7/site-packages/matplotlib/ticker.py:2222: RuntimeWarning: overflow encountered in multiply
    >     steps = self._extended_steps * scale
    >   /usr/local/lib64/python3.7/site-packages/matplotlib/ticker.py:2246: RuntimeWarning: overflow encountered in double_scalars
    >     best_vmin = (_vmin // step) * step
    >   /usr/local/lib64/python3.7/site-packages/matplotlib/ticker.py:2061: RuntimeWarning: invalid value encountered in double_scalars
    >     d, m = divmod(x, self.step)
    >   /usr/local/lib64/python3.7/site-packages/matplotlib/ticker.py:2068: RuntimeWarning: invalid value encountered in double_scalars
    >     d, m = divmod(x, self.step)
    >   "
    >         },
    >         {
    >           "name": "Library_Validation.json",
    >           "result": "PASS",
    >           "outputs": {
    >             "valid": true
    >           },
    >           "messages": [],
    >           "time": {
    >             "result": "FAST",
    >             "elapsed": "9.61",
    >             "expected": "60.00",
    >             "percent": "-83.99",
    >             "start": "2022-11-21T16:57:59.134988",
    >             "finish": "2022-11-21T16:58:08.740456"
    >           },
    >           "logs": ""
    >         }
    >       ]
    >     ]
    >   }

    #
    # OK interesting.
    # We get an Exception thrown in matplotlib, when it tries to access the data.
    # Shows how late Spark is delaying the read.
    # Also suggests we should have a fail-fast check in gaiuadmpsetup that always checks the target data is present.
    #
    # ... and why did three tests pass ?
    #

    #
    # I can understand the 'Library Validation' notebook passing.
    # It justs tests the versions of the dependencies.
    #

        {
        "name": "Library_Validation.json",
        "result": "PASS",
        ....
        }

    #
    # I can understand the 'GaiaDMPSetup' notebook passing.
    # Although perhaps it should have an explicit check that the data is present.
    #

        {
        "name": "GaiaDMPSetup",
        "result": "PASS",
        ....
        }

    #
    # Which leaves 'Mean proper motions'.
    # No way that should pass.
    #

        {
        "name": "Mean_proper_motions_over_the_sky",
        "result": "PASS",
        ....
        }


# -----------------------------------------------------
# Setup a SSH tunnel SOCKS proxy.
# https://unix.stackexchange.com/questions/34004/how-does-tcp-keepalive-work-in-ssh
# https://unix.stackexchange.com/a/34201
#[root@ansibler]

    ssh \
        -n \
        -f \
        -N \
        -D '*:3000' \
        -o ServerAliveInterval=10 \
        -o ServerAliveCountMax=12 \
        zeppelin

    >   ....
    >   ....


# -----------------------------------------------------
# Login via the UI and check the notebooks.
#[user@desktop]

    firefox \
        --new-window \
        'http://zeppelin:8080/' &

        #
        # Compare example 3 and example 4
        #

    >   3. Source counts over the sky
    >
    >   %pyspark
    >   import gaiadmpsetup
    >
    >   df = spark.sql("SELECT FLOOR(source_id / %d"%(divisor) + ") AS hpx_id, COUNT(*) AS n FROM gaiadr3.gaia_source GROUP BY hpx_id")
    >   ....


    >   4. Mean proper motions over the sky
    >
    >   %pyspark
    >   import gaiadmpsetup
    >
    >   query = "SELECT floor(source_id /  %d"%(divisor) + ") AS hpx_id, COUNT(*) AS n, AVG(pmra) AS avg_pmra, AVG(pmdec) AS avg_pmdec FROM gaia_source GROUP BY hpx_id"
    >   ....

    #
    # It looks like example 3 is explicitly loading 'gaiadr3.gaia_source', which fails.
    # but example 4 is loading 'gaia_source', which matches the table in 'gaiaedr3' ?
    #


# -----------------------------------------------------
# Edit local version of gaiadmpsetup to use the wrong path.
#[root@ansibler]

    ssh zeppelin

        vi "${HOME}/gaiadmpsetup/gaiadmpsetup/gaiaedr3_pyspark_schema_structures.py"

            # base folder for all products of this release
        -   release_folder = 'GEDR3'
        +   release_folder = 'GEDR3_FROG'


# -----------------------------------------------------
# Run our simple test set.
#[root@ansibler]

    usercount=2

    endpoint="http://zeppelin:8080"
    testconfig=/deployments/zeppelin/test/config/quick.json
    testusers=/tmp/test-creds.json

    testname="multi-user-$(printf "%02d" ${usercount})-00"

    delaystart=4
    delaynotebook=5

    mkdir -p /tmp/results

    /tmp/run-benchmark.py \
        "${endpoint:?}" \
        "${testconfig:?}" \
        "${testusers:?}" \
        "${usercount:?}" \
        "${delaystart:?}" \
        "${delaynotebook:?}" \
    | tee "/tmp/results/${testname:?}.txt" \
    | sed '
        /^Test started/ d
        /^Test completed/ d
        ' \
    | jq '.'


    >         ....
    >         {
    >           "name": "Mean_proper_motions_over_the_sky",
    >           "result": "PASS",
    >           "outputs": {
    >             "valid": true
    >           },
    >           "messages": [],
    >           "time": {
    >             "result": "FAST",
    >             "elapsed": "14.41",
    >             "expected": "55.00",
    >             "percent": "-73.80",
    >             "start": "2022-11-21T17:37:00.436560",
    >             "finish": "2022-11-21T17:37:14.848534"
    >           },
    >           "logs": ""
    >         },
    >         ....

    #
    # The test passes - possibly because the Spark context for that user has been created by previous set of tests.
    #


# -----------------------------------------------------
# Restart Zeppelin to force a clean test run.
#[root@ansibler]

    ssh zeppelin \
        '
        zeppelin-daemon.sh restart
        '

    >   Zeppelin stop                                              [  OK  ]
    >   Zeppelin start                                             [  OK  ]

    #
    # TODO Create a local bash function to reset a user's interpreter(s).
    #


# -----------------------------------------------------
# Run our simple test set.
#[root@ansibler]

    usercount=2

    endpoint="http://zeppelin:8080"
    testconfig=/deployments/zeppelin/test/config/quick.json
    testusers=/tmp/test-creds.json

    testname="multi-user-$(printf "%02d" ${usercount})-00"

    delaystart=4
    delaynotebook=5

    mkdir -p /tmp/results

    /tmp/run-benchmark.py \
        "${endpoint:?}" \
        "${testconfig:?}" \
        "${testusers:?}" \
        "${usercount:?}" \
        "${delaystart:?}" \
        "${delaynotebook:?}" \
    | tee "/tmp/results/${testname:?}.txt" \
    | sed '
        /^Test started/ d
        /^Test completed/ d
        ' \
    | jq '.'


    #
    # Test stil passes !?
    #

    >         ....
    >         {
    >           "name": "Mean_proper_motions_over_the_sky",
    >           "result": "PASS",
    >           "outputs": {
    >             "valid": true
    >           },
    >           "messages": [],
    >           "time": {
    >             "result": "FAST",
    >             "elapsed": "14.54",
    >             "expected": "55.00",
    >             "percent": "-73.56",
    >             "start": "2022-11-21T17:48:42.175681",
    >             "finish": "2022-11-21T17:48:56.715848"
    >           },
    >           "logs": ""
    >         },
    >         ....


# -----------------------------------------------------
# Explicitly remove the cached Pythopn.
#[root@ansibler]

    ssh zeppelin \
        "
        rm -r 'gaiadmpsetup/gaiadmpsetup/__pycache__'
        "


# -----------------------------------------------------
# Run our simple test set.
#[root@ansibler]

    usercount=2

    endpoint="http://zeppelin:8080"
    testconfig=/deployments/zeppelin/test/config/quick.json
    testusers=/tmp/test-creds.json

    testname="multi-user-$(printf "%02d" ${usercount})-00"

    delaystart=4
    delaynotebook=5

    mkdir -p /tmp/results

    /tmp/run-benchmark.py \
        "${endpoint:?}" \
        "${testconfig:?}" \
        "${testusers:?}" \
        "${usercount:?}" \
        "${delaystart:?}" \
        "${delaynotebook:?}" \
    | tee "/tmp/results/${testname:?}.txt" \
    | sed '
        /^Test started/ d
        /^Test completed/ d
        ' \
    | jq '.'

    #
    # Test stil passes !?
    #

    >         ....
    >         {
    >           "name": "Mean_proper_motions_over_the_sky",
    >           "result": "PASS",
    >           "outputs": {
    >             "valid": true
    >           },
    >           "messages": [],
    >           "time": {
    >             "result": "FAST",
    >             "elapsed": "14.32",
    >             "expected": "55.00",
    >             "percent": "-73.95",
    >             "start": "2022-11-21T18:11:47.577494",
    >             "finish": "2022-11-21T18:12:01.902472"
    >           },
    >           "logs": ""
    >         },
    >         ....


# -----------------------------------------------------
# Restart Zeppelin AND delete the cached Python to force a clean test run.
#[root@ansibler]

    ssh zeppelin \
        '
        rm -r 'gaiadmpsetup/gaiadmpsetup/__pycache__'
        zeppelin-daemon.sh restart
        '

    >   Zeppelin stop                                              [  OK  ]
    >   Zeppelin start                                             [  OK  ]


# -----------------------------------------------------
# Run our simple test set.
#[root@ansibler]

    usercount=2

    endpoint="http://zeppelin:8080"
    testconfig=/deployments/zeppelin/test/config/quick.json
    testusers=/tmp/test-creds.json

    testname="multi-user-$(printf "%02d" ${usercount})-00"

    delaystart=4
    delaynotebook=5

    mkdir -p /tmp/results

    /tmp/run-benchmark.py \
        "${endpoint:?}" \
        "${testconfig:?}" \
        "${testusers:?}" \
        "${usercount:?}" \
        "${delaystart:?}" \
        "${delaynotebook:?}" \
    | tee "/tmp/results/${testname:?}.txt" \
    | sed '
        /^Test started/ d
        /^Test completed/ d
        ' \
    | jq '.'


    #
    # Test stil passes !?
    #

    >         ....
    >         {
    >           "name": "Mean_proper_motions_over_the_sky",
    >           "result": "PASS",
    >           "outputs": {
    >             "valid": true
    >           },
    >           "messages": [],
    >           "time": {
    >             "result": "FAST",
    >             "elapsed": "14.36",
    >             "expected": "55.00",
    >             "percent": "-73.88",
    >             "start": "2022-11-21T18:15:40.400462",
    >             "finish": "2022-11-21T18:15:54.765204"
    >           },
    >           "logs": ""
    >         },
    >         ....

    #
    # As ever - the easy part consumes the most time !?
    # Leave the missing -ve result for now and see if we can generate the ve result we were expecting.
    #

# -----------------------------------------------------
# Edit local version of gaiadmpsetup to use the NEW path.
#[root@ansibler]

    ssh zeppelin

        vi "${HOME}/gaiadmpsetup/gaiadmpsetup/gaiadr3_pyspark_schema_structures.py"

        -   release_folder = 'GDR3_FROG'
        +   release_folder = 'GDR3_2048_NEW'


# -----------------------------------------------------
# Restart Zeppelin AND delete the cached Python to force a clean test run.
#[root@ansibler]

    ssh zeppelin \
        '
        rm -r 'gaiadmpsetup/gaiadmpsetup/__pycache__'
        zeppelin-daemon.sh restart
        '

    >   Zeppelin stop                                              [  OK  ]
    >   Zeppelin start                                             [  OK  ]

# -----------------------------------------------------
# Run our simple test set.
#[root@ansibler]

    usercount=2

    endpoint="http://zeppelin:8080"
    testconfig=/deployments/zeppelin/test/config/quick.json
    testusers=/tmp/test-creds.json

    testname="multi-user-$(printf "%02d" ${usercount})-00"

    delaystart=4
    delaynotebook=5

    mkdir -p /tmp/results

    /tmp/run-benchmark.py \
        "${endpoint:?}" \
        "${testconfig:?}" \
        "${testusers:?}" \
        "${usercount:?}" \
        "${delaystart:?}" \
        "${delaynotebook:?}" \
    | tee "/tmp/results/${testname:?}.txt" \
    | sed '
        /^Test started/ d
        /^Test completed/ d
        ' \
    | jq '.'

    #
    # Same tests pass and fail !?
    # Expected to see both passing.
    #

    >         ....
    >         {
    >           "name": "Mean_proper_motions_over_the_sky",
    >           "result": "PASS",
    >           "outputs": {
    >             "valid": true
    >           },
    >           "messages": [],
    >           "time": {
    >             "result": "FAST",
    >             "elapsed": "14.39",
    >             "expected": "55.00",
    >             "percent": "-73.83",
    >             "start": "2022-11-21T18:24:37.936203",
    >             "finish": "2022-11-21T18:24:52.330297"
    >           },
    >           "logs": ""
    >         },
    >         {
    >           "name": "Source_counts_over_the_sky.json",
    >           "result": "ERROR",
    >           "outputs": {
    >             "valid": true
    >           },
    >           "messages": [],
    >           "time": {
    >             "result": "FAST",
    >             "elapsed": "3.98",
    >             "expected": "22.00",
    >             "percent": "-81.90",
    >             "start": "2022-11-21T18:24:57.335730",
    >             "finish": "2022-11-21T18:25:01.318393"
    >           },
    >           "logs": "...."
    >         },
    >         ....

    #
    # It would be nice if the Exception gave us a clue about where the errors was happeing.
    # We assume it isn't actually in matplotlib.
    #

    >         ....
    >         {
    >           "name": "Source_counts_over_the_sky.json",
    >           "result": "ERROR",
    >           "outputs": {
    >             "valid": true
    >           },
    >           "messages": [],
    >           "time": {
    >             "result": "FAST",
    >             "elapsed": "3.98",
    >             "expected": "22.00",
    >             "percent": "-81.90",
    >             "start": "2022-11-21T18:24:57.335730",
    >             "finish": "2022-11-21T18:25:01.318393"
    >           },
    >           "logs": "
    >   /usr/local/lib64/python3.7/site-packages/healpy/pixelfunc.py:339: RuntimeWarning: invalid value encountered in subtract
    >     return np.absolute(m - badval) <= atol + rtol * np.absolute(badval)
    >   /usr/local/lib64/python3.7/site-packages/healpy/projaxes.py:920: MatplotlibDeprecationWarning: You are modifying the state of a globally registered colormap. This has been deprecated since 3.3 and in 3.6, you will not be able to modify a registered colormap in-place. To remove this warning, you can make a copy of the colormap first. cmap = mpl.cm.get_cmap(\"viridis\").copy()
    >     newcm.set_over(newcm(1.0))
    >   /usr/local/lib64/python3.7/site-packages/healpy/projaxes.py:921: MatplotlibDeprecationWarning: You are modifying the state of a globally registered colormap. This has been deprecated since 3.3 and in 3.6, you will not be able to modify a registered colormap in-place. To remove this warning, you can make a copy of the colormap first. cmap = mpl.cm.get_cmap(\"viridis\").copy()
    >     newcm.set_under(bgcolor)
    >   /usr/local/lib64/python3.7/site-packages/healpy/projaxes.py:922: MatplotlibDeprecationWarning: You are modifying the state of a globally registered colormap. This has been deprecated since 3.3 and in 3.6, you will not be able to modify a registered colormap in-place. To remove this warning, you can make a copy of the colormap first. cmap = mpl.cm.get_cmap(\"viridis\").copy()
    >     newcm.set_bad(badcolor)
    >   /usr/local/lib64/python3.7/site-packages/numpy/core/numeric.py:2365: RuntimeWarning: invalid value encountered in multiply
    >     x = x * ones_like(cond)
    >   /usr/local/lib64/python3.7/site-packages/numpy/ma/core.py:1015: RuntimeWarning: overflow encountered in multiply
    >     result = self.f(da, db, *args, **kwargs)
    >   /usr/local/lib64/python3.7/site-packages/healpy/projaxes.py:943: RuntimeWarning: invalid value encountered in log10
    >     locs = np.log10(vmin) + np.arange(self.Nlocs) * (
    >   /usr/local/lib64/python3.7/site-packages/healpy/projaxes.py:945: RuntimeWarning: invalid value encountered in log10
    >     ) / (self.Nlocs - 1.0)
    >   /usr/local/lib64/python3.7/site-packages/matplotlib/image.py:446: RuntimeWarning: overflow encountered in double_scalars
    >     newmin = vmid - dv * fact
    >   /usr/local/lib64/python3.7/site-packages/matplotlib/image.py:451: RuntimeWarning: overflow encountered in double_scalars
    >     newmax = vmid + dv * fact
    >   /usr/local/lib64/python3.7/site-packages/matplotlib/image.py:479: RuntimeWarning: invalid value encountered in subtract
    >     A_scaled -= a_min
    >   /usr/local/lib64/python3.7/site-packages/matplotlib/image.py:487: RuntimeWarning: invalid value encountered in true_divide
    >     A_scaled /= ((a_max - a_min) / frac)
    >   /usr/local/lib64/python3.7/site-packages/matplotlib/image.py:503: RuntimeWarning: invalid value encountered in multiply
    >     A_resampled *= ((a_max - a_min) / frac)
    >   /usr/local/lib64/python3.7/site-packages/matplotlib/image.py:504: RuntimeWarning: invalid value encountered in multiply
    >     vrange *= ((a_max - a_min) / frac)
    >   /usr/local/lib64/python3.7/site-packages/matplotlib/ticker.py:2222: RuntimeWarning: overflow encountered in multiply
    >     steps = self._extended_steps * scale
    >   /usr/local/lib64/python3.7/site-packages/matplotlib/ticker.py:2246: RuntimeWarning: overflow encountered in double_scalars
    >     best_vmin = (_vmin // step) * step
    >   /usr/local/lib64/python3.7/site-packages/matplotlib/ticker.py:2061: RuntimeWarning: invalid value encountered in double_scalars
    >     d, m = divmod(x, self.step)
    >   /usr/local/lib64/python3.7/site-packages/matplotlib/ticker.py:2068: RuntimeWarning: invalid value encountered in double_scalars
    >     d, m = divmod(x, self.step)"
    >         },
    >         ....

    #
    # Half the warnings are about the £"$%&* colormap !!
    # This ^&$£%^ just gets in the way of debugging the real cause.
    # Broken windows.
    #

    >   /usr/local/lib64/python3.7/site-packages/healpy/pixelfunc.py:339: RuntimeWarning: invalid value encountered in subtract
    >     return np.absolute(m - badval) <= atol + rtol * np.absolute(badval)
    >   /usr/local/lib64/python3.7/site-packages/healpy/projaxes.py:920: MatplotlibDeprecationWarning: You are modifying the state of a globally registered colormap. This has been deprecated since 3.3 and in 3.6, you will not be able to modify a registered colormap in-place. To remove this warning, you can make a copy of the colormap first. cmap = mpl.cm.get_cmap(\"viridis\").copy()
    >     newcm.set_over(newcm(1.0))
    >   /usr/local/lib64/python3.7/site-packages/healpy/projaxes.py:921: MatplotlibDeprecationWarning: You are modifying the state of a globally registered colormap. This has been deprecated since 3.3 and in 3.6, you will not be able to modify a registered colormap in-place. To remove this warning, you can make a copy of the colormap first. cmap = mpl.cm.get_cmap(\"viridis\").copy()
    >     newcm.set_under(bgcolor)
    >   /usr/local/lib64/python3.7/site-packages/healpy/projaxes.py:922: MatplotlibDeprecationWarning: You are modifying the state of a globally registered colormap. This has been deprecated since 3.3 and in 3.6, you will not be able to modify a registered colormap in-place. To remove this warning, you can make a copy of the colormap first. cmap = mpl.cm.get_cmap(\"viridis\").copy()
    >     newcm.set_bad(badcolor)

    #
    # Ok, perhaps there is something wrong with the new data.
    # Try using the original DR3 data.
    #

# -----------------------------------------------------
# Edit local version of gaiadmpsetup to use the original path.
#[root@ansibler]

    ssh zeppelin

        vi "${HOME}/gaiadmpsetup/gaiadmpsetup/gaiadr3_pyspark_schema_structures.py"

        -   release_folder = 'GDR3_2048_NEW'
        +   release_folder = 'GDR3'


# -----------------------------------------------------
# Restart Zeppelin AND delete the cached Python to force a clean test run.
#[root@ansibler]

    ssh zeppelin \
        '
        rm -r 'gaiadmpsetup/gaiadmpsetup/__pycache__'
        zeppelin-daemon.sh restart
        '

    >   Zeppelin stop                                              [  OK  ]
    >   Zeppelin start                                             [  OK  ]

# -----------------------------------------------------
# Run our simple test set.
#[root@ansibler]

    usercount=2

    endpoint="http://zeppelin:8080"
    testconfig=/deployments/zeppelin/test/config/quick.json
    testusers=/tmp/test-creds.json

    testname="multi-user-$(printf "%02d" ${usercount})-00"

    delaystart=4
    delaynotebook=5

    mkdir -p /tmp/results

    /tmp/run-benchmark.py \
        "${endpoint:?}" \
        "${testconfig:?}" \
        "${testusers:?}" \
        "${usercount:?}" \
        "${delaystart:?}" \
        "${delaynotebook:?}" \
    | tee "/tmp/results/${testname:?}.txt" \
    | sed '
        /^Test started/ d
        /^Test completed/ d
        ' \
    | jq '.'

    #
    # All the tests pass.
    #

    >   {
    >     "config": {
    >       "endpoint": "http://zeppelin:8080",
    >       "testconfig": "/deployments/zeppelin/test/config/quick.json",
    >       "userlist": "/tmp/test-creds.json",
    >       "usercount": "2",
    >       "delaystart": "4",
    >       "delaynotebook": "5"
    >     },
    >     "output": [
    >       [
    >         {
    >           "name": "GaiaDMPSetup",
    >           "result": "PASS",
    >           "outputs": {
    >             "valid": true
    >           },
    >           "messages": [],
    >           "time": {
    >             "result": "FAST",
    >             "elapsed": "36.37",
    >             "expected": "45.00",
    >             "percent": "-19.19",
    >             "start": "2022-11-21T18:43:20.517754",
    >             "finish": "2022-11-21T18:43:56.883205"
    >           },
    >           "logs": ""
    >         },
    >         {
    >           "name": "Mean_proper_motions_over_the_sky",
    >           "result": "PASS",
    >           "outputs": {
    >             "valid": true
    >           },
    >           "messages": [],
    >           "time": {
    >             "result": "SLOW",
    >             "elapsed": "147.04",
    >             "expected": "55.00",
    >             "percent": "167.34",
    >             "start": "2022-11-21T18:44:01.888506",
    >             "finish": "2022-11-21T18:46:28.927789"
    >           },
    >           "logs": ""
    >         },
    >         {
    >           "name": "Source_counts_over_the_sky.json",
    >           "result": "PASS",
    >           "outputs": {
    >             "valid": true
    >           },
    >           "messages": [],
    >           "time": {
    >             "result": "SLOW",
    >             "elapsed": "67.68",
    >             "expected": "22.00",
    >             "percent": "207.62",
    >             "start": "2022-11-21T18:46:33.933110",
    >             "finish": "2022-11-21T18:47:41.610296"
    >           },
    >           "logs": ""
    >         },
    >         {
    >           "name": "Library_Validation.json",
    >           "result": "PASS",
    >           "outputs": {
    >             "valid": true
    >           },
    >           "messages": [],
    >           "time": {
    >             "result": "FAST",
    >             "elapsed": "9.63",
    >             "expected": "60.00",
    >             "percent": "-83.95",
    >             "start": "2022-11-21T18:47:46.616459",
    >             "finish": "2022-11-21T18:47:56.247539"
    >           },
    >           "logs": ""
    >         }
    >       ],
    >       [
    >         {
    >           "name": "GaiaDMPSetup",
    >           "result": "PASS",
    >           "outputs": {
    >             "valid": true
    >           },
    >           "messages": [],
    >           "time": {
    >             "result": "FAST",
    >             "elapsed": "41.07",
    >             "expected": "45.00",
    >             "percent": "-8.74",
    >             "start": "2022-11-21T18:43:24.521580",
    >             "finish": "2022-11-21T18:44:05.589075"
    >           },
    >           "logs": ""
    >         },
    >         {
    >           "name": "Mean_proper_motions_over_the_sky",
    >           "result": "PASS",
    >           "outputs": {
    >             "valid": true
    >           },
    >           "messages": [],
    >           "time": {
    >             "result": "SLOW",
    >             "elapsed": "141.50",
    >             "expected": "55.00",
    >             "percent": "157.27",
    >             "start": "2022-11-21T18:44:10.594485",
    >             "finish": "2022-11-21T18:46:32.095678"
    >           },
    >           "logs": ""
    >         },
    >         {
    >           "name": "Source_counts_over_the_sky.json",
    >           "result": "PASS",
    >           "outputs": {
    >             "valid": true
    >           },
    >           "messages": [],
    >           "time": {
    >             "result": "SLOW",
    >             "elapsed": "64.51",
    >             "expected": "22.00",
    >             "percent": "193.22",
    >             "start": "2022-11-21T18:46:37.098621",
    >             "finish": "2022-11-21T18:47:41.606244"
    >           },
    >           "logs": ""
    >         },
    >         {
    >           "name": "Library_Validation.json",
    >           "result": "PASS",
    >           "outputs": {
    >             "valid": true
    >           },
    >           "messages": [],
    >           "time": {
    >             "result": "FAST",
    >             "elapsed": "9.63",
    >             "expected": "60.00",
    >             "percent": "-83.96",
    >             "start": "2022-11-21T18:47:46.613633",
    >             "finish": "2022-11-21T18:47:56.240082"
    >           },
    >           "logs": ""
    >         }
    >       ]
    >     ]
    >   }

    #
    # So using the original data - everything works.
    # Using the new copy of the data - one test fails.
    # Source counts - FAIL
    # Proper motions - PASS
    #

    #
    # TODO
    # Check to see if we get the same results using Nigel's data ?
    # Check to see if adding the 'gaiadr3' schema namespace to the query fixes the notebook ?
    #


