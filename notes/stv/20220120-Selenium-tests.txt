#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2021, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

# -----------------------------------------
# Add the Selenium Add on to Chrome

https://chrome.google.com/webstore/detail/selenium-ide/mooikfkahbdckldjjndioackbalphokd?hl=en



# -------------------------------------------------
# Install Selenium web drivers

# Install webdrivermanager with pip

pip install webdrivermanager

# Install the driver for Firefox and Chrome

webdrivermanager firefox chrome --linkpath /usr/local/bin



# Install pytest-xdist for parallel testing

pip install pytest-xdist



# ---------------------------------------------------------
# Create a Selenium example test, using the Selenium Add on

# Done in the Selenium Add on IDE
# Select a url to test
# Click record
# Record the actions we want to test
# Add any assertions we want to test (i.e. element exists)

	

# --------------------------------------------
# Example 1
# Running a JupyterHub notebook



# --------------------------------------------------------------------
# Step 1. Record the process with the Selenium IDE, and store locally..


# ----------------------------------------------
# Step 2. Setup configuration test

# conftest.py

import pytest
from selenium import webdriver


@pytest.fixture(scope="session")
def setup(request):
    print("initiating firefox driver")
    driver = webdriver.Firefox()
    session = request.node

    for item in session.items:
        cls = item.getparent(pytest.Class)
        setattr(cls.obj, "driver", driver)

    driver.get("https://mybinder.org/v2/git/https%3A%2F%2Fgit.astron.nl%2Fastron-sdc%2Fescape-wp5%2Fworkflows%2Fapertif-vo-example/HEAD?urlpath=lab/tree/PyVO.ipynb")
    driver.maximize_window()

    yield driver
    driver.close()




# ----------------------------------------------
# Step 3. Create test1


# test_login.py


import pytest

from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.common.exceptions import TimeoutException


@pytest.mark.usefixtures("setup")
class TestExampleOne:


    @pytest.mark.parametrize(
        "user, password",
        [("valid_user@gmail.com", "12345678")],
    )
    def test_test1(self, user, password):
      print ("Running test as user: " + user)
      wait = WebDriverWait(self.driver, 60)
      wait.until(expected_conditions.visibility_of_element_located((By.ID, "filebrowser")))
      self.driver.implicitly_wait(60) # seconds
      delay = 3
      time.sleep(50)
      self.driver.find_element(By.CSS_SELECTOR, ".jp-ToolbarButton:nth-child(6) > .bp3-button").click()
      self.driver.find_element(By.CSS_SELECTOR, ".jp-ToolbarButton:nth-child(6) > .bp3-button").click()
      element = self.driver.find_element(By.CSS_SELECTOR, ".jp-ToolbarButton:nth-child(6) > .bp3-button")
      actions = ActionChains(self.driver)
      actions.double_click(element).perform()
      self.driver.find_element(By.CSS_SELECTOR, ".jp-ToolbarButton:nth-child(6) > .bp3-button").click()
      self.driver.find_element(By.CSS_SELECTOR, ".jp-ToolbarButton:nth-child(6) > .bp3-button").click()
      self.driver.find_element(By.CSS_SELECTOR, ".jp-ToolbarButton:nth-child(6) > .bp3-button").click()
      element = self.driver.find_element(By.CSS_SELECTOR, ".jp-ToolbarButton:nth-child(6) > .bp3-button")
      actions = ActionChains(self.driver)
      actions.double_click(element).perform()
      self.driver.find_element(By.CSS_SELECTOR, ".jp-ToolbarButton:nth-child(6) > .bp3-button").click()
      self.driver.find_element(By.CSS_SELECTOR, ".jp-ToolbarButton:nth-child(6) > .bp3-button").click()
      self.driver.find_element(By.CSS_SELECTOR, ".jp-ToolbarButton:nth-child(6) > .bp3-button").click()
      element = self.driver.find_element(By.CSS_SELECTOR, ".jp-ToolbarButton:nth-child(6) > .bp3-button")
      actions = ActionChains(self.driver)
      actions.double_click(element).perform()

      elements = self.driver.find_elements(By.CSS_SELECTOR, ".lm-Widget:nth-child(8) .lm-Widget > pre")
      assert len(elements) > 0



# ----------------------------------------------
# Step 4. Create a copy of test1 .. i.e. test2
# Replace instances of 1/One with 2/Two





# --------------------------------------------------------
# Step 5. Running Pytests in parallel (i.e. as multiple users)

# Now that we have two tests, run py test with two threads

pytest -s -v -n=2

> [gw0] PASSED test_example1.py::TestExampleOne::test_test1[valid_user@gmail.com-12345678] 
> [gw1] PASSED test_example2.py::TestExampleTwo::test_test2[valid_user@gmail.com-12345678] 


[SUCCESS]


# ----------------------------------------------------------------------------------------------------------------------------------



# --------------------------------------------
# Example 2
# Login PyTest

# The following test logs in to the example demo login page, with the credentials passed in to the parametrize decorator


# test_login.py

import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.common.exceptions import TimeoutException


class TestLogin:


    @pytest.mark.parametrize(
        "user, password",
        [("valid_user@gmail.com", "12345678")],
    )
    def test_test5(self, user, password):
        print("initiating firefox driver")
        self.driver = webdriver.Firefox()
        self.driver.get("https://www.stealmylogin.com/demo.html")
        self.driver.find_element(By.NAME, "username").click()
        self.driver.find_element(By.NAME, "username").send_keys(user)
        self.driver.find_element(By.NAME, "password").send_keys(password)
        self.driver.find_element(By.NAME, "password").send_keys(Keys.ENTER)

        wait = WebDriverWait(self.driver, 60)
        self.driver.implicitly_wait(60) # seconds
        elements = self.driver.find_elements_by_xpath("//*[contains(text(), 'Example Domain')]")
        assert len(elements) > 0
        self.driver.close()



pytest test_login.py

> [gw0] PASSED test_login.py::TestLogin::test_login[valid_user@gmail.com-12345678] 

[SUCCESS]

