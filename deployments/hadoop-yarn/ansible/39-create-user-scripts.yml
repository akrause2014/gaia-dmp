#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2022, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

- name: "Install user account tools"
  hosts: zeppelin
  become: true
  gather_facts: true
  vars_files:
    - config/shiro.yml
    - config/aglais.yml
    - config/ansible.yml
    - config/hadoop.yml
    - config/zeppelin.yml
    - /opt/aglais/aglais-status.yml
  vars:

    sshkeyname: "id_rsa"
    sshkeytype: "rsa"

    export_users: |
            #!/bin/bash
            printf "Exporting users to file: auth.sql"
            printf "\n"

            mysqldump --no-create-info --databases "{{shirodbname}}"  > {{aghome}}/tmp/auth.sql

    create_hdfs_home: |
            #!/bin/bash
            # Setup HDFS user directory
            NEW_USERNAME=${1:?}
            NEW_USERTYPE=${2:?}
            NEW_HDFS_ROOT={{hdfsuserhome}}
            NEW_HDFS_PATH=$NEW_HDFS_ROOT/$NEW_USERNAME
            NEW_HDFS_GROUP={{hdfsusergroup}}

            hdfs dfs -mkdir -p $NEW_HDFS_PATH
            hdfs dfs -chown -R $NEW_USERNAME:$NEW_HDFS_GROUP $NEW_HDFS_PATH

            cat << EOF
            {
            "path": "${NEW_HDFS_PATH}",
            "owner": "${NEW_USERNAME}",
            "group": "${NEW_HDFS_GROUP}"
            }
            EOF

    create_mysql_user: |
            #!/bin/bash
            # Create MySQL user
            NEW_USERNAME=${1:?}
            NEW_USERTYPE=${2:?}
            NEW_PASSWORD_ENCRYPTED=${3:-''}
            NEW_PASSWORD=''

            USER_TABLE='users';
            USER_ROLES_TABLE='user_roles'

            if [ -z "${NEW_PASSWORD_ENCRYPTED}" ]
            then
                NEW_PASSWORD=$(
                    pwgen 30 1
                    )
                NEW_PASSWORD_ENCRYPTED="$(java -jar {{aghome}}/lib/shiro-tools-hasher-cli.jar -i 500000 -f shiro1 -a SHA-256 -gss 128 $NEW_PASSWORD)"
            fi

            mysql {{shirodbname}} << EOF
            INSERT INTO $USER_TABLE (username, password) VALUES ("$NEW_USERNAME", "$NEW_PASSWORD_ENCRYPTED");
            INSERT INTO $USER_ROLES_TABLE (username, role_name) VALUES ("$NEW_USERNAME", "$NEW_USERTYPE");
            EOF

            cat << EOF
            {
            "name": "${NEW_USERNAME}",
            "type": "${NEW_USERTYPE}",
            "pass": "${NEW_PASSWORD}",
            "hash": "${NEW_PASSWORD_ENCRYPTED}"
            }
            EOF

    create_unix_user: |
            #!/bin/bash
            # Add user
            NEW_USERNAME="${1:?}"
            NEW_USERTYPE="${2:?}"
            NEW_USERID="${3}"
            NEW_UNIX_DIR="${4:-/home/$NEW_USERNAME}"

            minuid=20000
            maxuid=60000

            sshkeyname={{sshkeyname}}
            sshkeytype={{sshkeytype}}
            zeppubkeypath={{zeppubkeypath}}
            zepusersgroup={{zepusersgroup}}

            # Get the next available uid
            # https://www.commandlinefu.com/commands/view/5684/determine-next-available-uid
            if [ -z ${NEW_USERID} ]
            then
                NEW_USERID=$(
                    getent passwd | awk -F: 'BEGIN {NEW_USERID = '${minuid}'} ($3 < '${maxuid}') && ($3 > NEW_USERID) { NEW_USERID = $3 } END { print NEW_USERID + 1 }'
                    )
            fi

            # Do the whole block as root rather than one line at a time.
            # https://stackoverflow.com/a/14497422
            sudo -s -- <<  SUDO

                # Create the new Unix user account.
                adduser \
                    --uid "${NEW_USERID}" \
                    --create-home \
                    --home-dir "${NEW_UNIX_DIR}" \
                    --user-group \
                    --groups "users,${zepusersgroup}" \
                    "${NEW_USERNAME}"

                # Generate our local ssh key pair.
                mkdir "${NEW_UNIX_DIR}/.ssh"
                ssh-keygen \
                    -t "${sshkeytype}" \
                    -N '' \
                    -f "${NEW_UNIX_DIR}/.ssh/${sshkeyname}" \
                > /dev/null 2>&1

                # Add the Zeppelin user's public key.
                cat "${zeppubkeypath}" >> "${NEW_UNIX_DIR}/.ssh/authorized_keys"

                # Fix permissions on the ssh directory.
                chown -R "${NEW_USERNAME}:${NEW_USERNAME}" "${NEW_UNIX_DIR}/.ssh"
                chmod -R "u=rwX,g=,o="     "${NEW_UNIX_DIR}/.ssh"

            SUDO

            # Generate our JSON response.
            cat << JSON
            {
            "name": "${NEW_USERNAME}",
            "type": "${NEW_USERTYPE}",
            "home": "${NEW_UNIX_DIR}",
            "uid":   ${NEW_USERID}
            }
            JSON


    create_notebook_clone: |
            #!/bin/bash
            NEW_USERNAME=$1
            NEW_USERTYPE=$2
            NEW_PASSWORD=$3
            ZEPPELIN_URL='http://localhost:8080'

            # Setup Clone of notebooks
            NEW_ZEPPELIN_DIR="{{zephome}}/notebook/Users/$NEW_USERNAME"
            NEW_ZEPPELIN_EXAMPLES_DIR="Users/$NEW_USERNAME/examples"
            mkdir -p $NEW_ZEPPELIN_DIR
            mkdir -p $NEW_ZEPPELIN_DIR/examples
            sudo chown -R {{ zepuser }}:{{ zepuser }} $NEW_ZEPPELIN_DIR

            zepcookies=/tmp/${NEW_USERNAME}.cookies

            echo '['

            curl \
            --silent \
            --request 'POST' \
            --cookie-jar "${zepcookies:?}" \
            --data "userName=${NEW_USERNAME:?}" \
            --data "password=${NEW_PASSWORD:?}" \
            ${ZEPPELIN_URL:?}/api/login

            curl --silent --cookie "${zepcookies:?}" "${ZEPPELIN_URL:?}/api/notebook"| jq -r '.body[] | select(.path | startswith("/Public")) | [.id, .path] | @tsv' |
            while IFS=$'\t' read -r id path; do
              echo ','
              curl --silent -L -H 'Content-Type: application/json' -d "{'name': '${path/Public Examples/Users/$NEW_USERNAME}' }" --request POST --cookie "${zepcookies:?}" $ZEPPELIN_URL/api/notebook/$id
            done
            echo ']'

    add_user: |
            #!/bin/bash

            if [ "$#" -ne 4 ]
            then

                printf "Create a new Zeppelin user"
                printf "\n"
                printf "Username: "
                read NEW_USERNAME

                printf "\n"
                printf "Usertype: "
                read NEW_USERTYPE

                stty -echo
                printf "Password: "
                read NEW_PASSWORD
                stty echo

                printf "\n"
                printf "User role: "
                read NEW_USER_ROLE
            else
                NEW_USERNAME=$1
                NEW_USERTYPE=$2
                NEW_PASSWORD=$3
                NEW_USER_ROLE=$4
            fi

            source {{aghome}}/bin/create_user.sh $NEW_USERNAME $NEW_USERTYPE $NEW_PASSWORD $NEW_USER_ROLE

    create_user: |
            #!/bin/bash
            NEW_USERNAME=$1
            NEW_USERTYPE=$2
            NEW_PASSWORD=$3
            NEW_USER_ROLE=$4

            source {{aghome}}/bin/create-shiro-user.sh $NEW_USERNAME $NEW_USERTYPE $NEW_USER_ROLE $NEW_PASSWORD
            source {{aghome}}/bin/create-linux-user.sh $NEW_USERNAME $NEW_USERTYPE
            source {{aghome}}/bin/create_hdfs_user.sh $NEW_USERNAME $NEW_USERTYPE
            source {{aghome}}/bin/create_notebook_clone.sh $NEW_USERNAME $NEW_USERTYPE $NEW_PASSWORD

  tasks:

   - name: "Install password generator"
     package:
       name:  "pwgen"
       state: present

#   - name: "Accept SSH key for data node"
#     become: true
#     become_user: "{{zepuser}}"
#     ansible.builtin.shell: |
#        ssh-keyscan 'data.gaia-dmp.uk' >> "${HOME}/.ssh/known_hosts"

   - name: "Create Scipt to export users"
     copy:
       owner: "{{zepuser}}"
       group: "{{zepuser}}"
       mode:  'u=rwx,g=rwx,o=rwx'
       dest:  "{{aghome}}/bin/export_users.sh"
       content: "{{ export_users }}"
     tags:
       - always

#  - name: "Create Top-level script to add a new user"
#    copy:
#      owner: "{{zepuser}}"
#      group: "{{zepuser}}"
#      mode:  'u=rwx,g=rwx,o=rwx'
#      dest:  "{{aghome}}/bin/add_user.sh"
#      content: "{{ add_user }}"
#    tags:
#      - always
#
#  - name: "Script to create a new user"
#    copy:
#      owner: "{{zepuser}}"
#      group: "{{zepuser}}"
#      mode:  'u=rwx,g=rwx,o=rwx'
#      dest:  "{{aghome}}/bin/create_user.sh"
#      content: "{{ create_user }}"
#    tags:
#      - always
#
#  - name: "Script to add a unix user"
#    copy:
#      owner: "{{zepuser}}"
#      group: "{{zepuser}}"
#      mode:  'u=rwx,g=rwx,o=rwx'
#      dest:  "{{aghome}}/bin/create_unix_user.sh"
#      content: "{{ create_unix_user }}"
#    tags:
#      - always

#  - name: "Script to create a HDFS user directory"
#    copy:
#      owner: "{{zepuser}}"
#      group: "{{zepuser}}"
#      mode:  'u=rwx,g=rwx,o=rwx'
#      dest:  "{{aghome}}/bin/create_hdfs_home.sh"
#      content: "{{ create_hdfs_home }}"
#    tags:
#      - always

#  - name: "Script to create add a MySQL user"
#    copy:
#      owner: "{{zepuser}}"
#      group: "{{zepuser}}"
#      mode:  'u=rwx,g=rwx,o=rwx'
#      dest:  "{{aghome}}/bin/create_mysql_user.sh"
#      content: "{{ create_mysql_user }}"
#    tags:
#      - always

#  - name: "Script to create a clone of the example notebooks"
#    copy:
#      owner: "{{zepuser}}"
#      group: "{{zepuser}}"
#      mode:  'u=rwx,g=rwx,o=rwx'
#      dest:  "{{aghome}}/bin/create_notebook_clone.sh"
#      content: "{{ create_notebook_clone }}"
#    tags:
#      - always

